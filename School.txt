// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Structure to store student information
    struct Student {
        uint256 id;
        string name;
        uint256 age;
        string course;
    }

    // Dynamic array to hold students
    Student[] public students;

    // Event to log when a new student is added
    event StudentAdded(uint256 id, string name, uint256 age, string course);

    // Fallback function to receive Ether
    fallback() external payable {
        // Optional: Logic for handling calls to non-existent functions
    }

    // Receive function to handle plain Ether transfers
    receive() external payable {
        // Optional: Logic to execute when Ether is received
    }

    // Function to add a new student
    function addStudent(string memory _name, uint256 _age, string memory _course) public {
        uint256 studentId = students.length; // Use current length as ID
        students.push(Student(studentId, _name, _age, _course)); // Add student to array
        emit StudentAdded(studentId, _name, _age, _course); // Emit event
    }

    // Function to get a student by ID
    function getStudent(uint256 _id) public view returns (Student memory) {
        require(_id < students.length, "Student does not exist");
        return students[_id];
    }

    // Function to get total number of students
    function getTotalStudents() public view returns (uint256) {
        return students.length;
    }
}
